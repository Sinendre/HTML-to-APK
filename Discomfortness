<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Discomfort</title>
<style>
  body {
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    overflow: hidden;
    background-size: cover;
  }

  #sky {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 50%;
    background-color: #87CEEB; /* Sky blue color */
    z-index: -1;
  }
  #cloud1 {
    position: absolute;
    top: 20%;
    left: 20%;
    width: 150px;
    height: 80px;
    background-color: white; /* Cloud color */
    border-radius: 50%;
  }
  #cloud2 {
    position: absolute;
    top: 10%;
    left: 70%;
    width: 120px;
    height: 60px;
    background-color: white; /* Cloud color */
    border-radius: 50%;
  }
  
  #game-container {
    position: relative;
    width: 100vw;
    height: 100vh;
    overflow: hidden;
  }

  #gameCanvas {
    border: 2px solid #000;
  }

  .hidden {
    display: none;
  }

  #game-over {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  #retryBtn {
    padding: 10px 20px;
  }

  #score {
    position: absolute;
    top: 1px;
    left: 1px;
    font-size: 24px;
    color: red;
  }

  #leftBtn {
    position: absolute;
    bottom: 150px;
    left: 5px;
    padding: 10px 20px;
    background-color: #FFC0CB;
    color: #333;
    border: 5px solid #FF4433;
    border-radius: 20px;
    cursor: pointer;
  }
</style>
</head>
<body>
<div id="game-container">
  <canvas id="gameCanvas"></canvas>
  <div id="game-over" class="hidden">
    <button id="retryBtn">Retry</button>
  </div>
  <div id="score">Score: 0</div>
  <div id="leftBtn">Left</div>
</div>
<script>
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

const PLAYER_WIDTH = 50;
const PLAYER_HEIGHT = 80;
const GRAVITY = 0.9;
const JUMP_FORCE = 20;
const VEHICLE_SPEED = 3;
const MOVE_LEFT_VELOCITY = -5;
const MOVE_RIGHT_VELOCITY = 5;

let player = {
  x: 50,
  y: canvas.height - PLAYER_HEIGHT,
  width: PLAYER_WIDTH,
  height: PLAYER_HEIGHT,
  velocityY: 0,
  velocityX: 0,
  jumping: false,
  movingRight: false,
  alive: true
};

let vehicles = [];
let lastVehicleSpawn = 0;
let vehicleSpawnRate = 1800; // Initial vehicle spawn rate in milliseconds
let vehicleWidth = 200;
let vehicleHeight = 200;

let boss = null;
const BOSS_WIDTH = 350;
const BOSS_HEIGHT = 350;
const BOSS_SPEED = 2.5;
let bossFightActive = false;

let gameSpeed = 2;
let score = 0;

let gameOver = false;

// Vehicle image links
const vehicleImages = [
  'https://i.postimg.cc/4KR5Qj7r/1000031835-removebg-preview.png',
  'https://i.postimg.cc/N5gkNZ4X/1000031833-removebg-preview.png',
  'https://i.postimg.cc/w70cnFfG/1000031834-removebg-preview.png'
];

function drawPlayer() {
  ctx.beginPath();
  ctx.arc(player.x + player.width / 2, player.y + player.height / 2, player.width / 2, 0, Math.PI * 2);
  ctx.fillStyle = 'Purple'; // Set the fill color of the circle
  ctx.fill();
  ctx.closePath();
}

function drawVehicles() {
  vehicles.forEach(vehicle => {
    let vehicleImg = new Image();
    vehicleImg.src = vehicleImages[vehicle.type];
    ctx.drawImage(vehicleImg, vehicle.x, vehicle.y, vehicleWidth, vehicleHeight);
  });
}

function drawBoss() {
  if (boss) {
    ctx.fillStyle = 'red'; // Boss color
    ctx.fillRect(boss.x, boss.y, BOSS_WIDTH, BOSS_HEIGHT);
  }
}

function spawnVehicle() {
  let type = Math.floor(Math.random() * vehicleImages.length);
  let y = canvas.height - vehicleHeight - -50; // Spawn vehicles at the bottom/ground level
  vehicles.push({ x: canvas.width + vehicleWidth, y: y, type: type });
}

function spawnBoss() {
  boss = {
    x: canvas.width,
    y: canvas.height - BOSS_HEIGHT,
    width: BOSS_WIDTH,
    height: BOSS_HEIGHT,
    velocityX: -BOSS_SPEED * gameSpeed
  };
  bossFightActive = true;
}

function movePlayer() {
  player.y += player.velocityY;
  player.x += player.velocityX;

  player.velocityY += GRAVITY;

  if (player.y > canvas.height - PLAYER_HEIGHT) {
    player.y = canvas.height - PLAYER_HEIGHT;
    player.velocityY = 0;
    player.jumping = false;
    player.movingRight = false;
    player.velocityX = 0; // Stop moving right after landing
  }

  // Prevent player from moving off-screen
  if (player.x < 0) {
    player.x = 0;
  } else if (player.x + player.width > canvas.width) {
    player.x = canvas.width - player.width;
  }
}

function moveVehicles() {
  vehicles.forEach(vehicle => {
    vehicle.x -= VEHICLE_SPEED * gameSpeed;
  });

  vehicles = vehicles.filter(vehicle => vehicle.x + vehicleWidth > 0);
}

function moveBoss() {
  if (boss) {
    boss.x += boss.velocityX;

    if (boss.x + BOSS_WIDTH < 0) {
      bossFightActive = false;
      boss = null;
    }
  }
}

function checkCollisions() {
  vehicles.forEach(vehicle => {
    if (
      player.x < vehicle.x + vehicleWidth &&
      player.x + player.width > vehicle.x &&
      player.y < vehicle.y + vehicleHeight &&
      player.y + player.height > vehicle.y &&
      player.velocityY >= 0
    ) {
      player.alive = false;
      gameOver = true;
    }
  });

  if (boss && 
      player.x < boss.x + BOSS_WIDTH &&
      player.x + player.width > boss.x &&
      player.y < boss.y + BOSS_HEIGHT &&
      player.y + player.height > boss.y) {
    player.alive = false;
    gameOver = true;
  }
}

// Update the score and check for score milestones
function updateScore() {
  score += 2;
  document.getElementById('score').textContent = `Score: ${score}`;

  // Check for score milestones
  if (score >= 1000 && score % 100 === 0) {
    gameSpeed += 0.1;
  }

  // Increase barrier spawn rate at 5000 score
  if (score >= 5000) {
    vehicleSpawnRate = 1150; // Decrease the spawn rate for more barriers
  }

  // Trigger boss fight at 10000 score
  if (score >= 10000 && !bossFightActive) {
    spawnBoss();
  }
}

function update() {
  if (!gameOver) {
    movePlayer();
    moveVehicles();
    moveBoss();
    checkCollisions();
    updateScore();

    let currentTime = new Date().getTime();
    if (!bossFightActive && currentTime - lastVehicleSpawn > vehicleSpawnRate) {
      spawnVehicle();
      lastVehicleSpawn = currentTime;
    }
  }
}

function draw() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  ctx.fillStyle = 'white';
  ctx.fillRect(0, 0, canvas.width, canvas.height);

  // Set the font style and size
  ctx.font = "20px Algerian";

  // Set the fill color for the text
  ctx.fillStyle = "Black"; // You can change "red" to any color you want

  // Draw the text on the canvas
  ctx.fillText("Powered by - Sinandrooz ", 100, 80); // Example position (50, 30)

  ctx.fillStyle = 'green';
  ctx.fillRect(0, canvas.height - canvas.height / 7,canvas.width, canvas.height / 3);

  if (player.alive) {
    drawPlayer();
    drawVehicles();
    drawBoss();
  } else
{
    ctx.fillStyle = 'black';
    ctx.font = '40px Arial';
    ctx.fillText('Game Over', canvas.width / 2 - 100, canvas.height / 2 - 20);
    document.getElementById('game-over').classList.remove('hidden');
  }
}

function gameLoop() {
  update();
  draw();
  requestAnimationFrame(gameLoop);
}

let startX, startY;
let endX, endY;

function handleTouchStart(event) {
  startX = event.touches[0].clientX;
  startY = event.touches[0].clientY;
}

function handleTouchMove(event) {
  endX = event.touches[0].clientX;
  endY = event.touches[0].clientY;
}

function handleTouchEnd() {
  let deltaX = endX - startX;
  let deltaY = endY - startY;

  if (Math.abs(deltaX) > Math.abs(deltaY)) {
    if (deltaX < 0) {
      // Swipe left
      player.velocityX = MOVE_LEFT_VELOCITY;
    } else if (deltaX > 0) {
      // Swipe right
      player.velocityX = MOVE_RIGHT_VELOCITY;
    }
  } else {
    if (deltaY < 0) {
      // Swipe up
      if (!player.jumping) {
        player.velocityY = -JUMP_FORCE;
        player.jumping = true;
        player.movingRight = true;
        player.velocityX = MOVE_RIGHT_VELOCITY; // Move right when jumping
      }
    }
  }

  startX = 0;
  startY = 0;
  endX = 0;
  endY = 0;
}

function handleRetry() {
  document.getElementById('game-over').classList.add('hidden');
  resetGame();
}

function resetGame() {
  player.x = 50;
  player.y = canvas.height - PLAYER_HEIGHT;
  player.velocityY = 0;
  player.velocityX = 0;
  player.jumping = false;
  player.movingRight = false;
  player.alive = true;
  vehicles = [];
  lastVehicleSpawn = 0;
  gameOver = false;
  score = 0;
  gameSpeed = 2;
}

document.addEventListener('touchstart', handleTouchStart);
document.addEventListener('touchmove', handleTouchMove);
document.addEventListener('touchend', handleTouchEnd);
document.getElementById('retryBtn').addEventListener('click', handleRetry);
document.getElementById('leftBtn').addEventListener('click', () => {
  player.velocityX = MOVE_LEFT_VELOCITY;
});

gameLoop();
</script>
</body>
</html>
